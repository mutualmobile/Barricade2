buildscript {
    ext {
        compose_version = '1.4.2'
    }
}// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.4.1' apply false
    id 'com.android.library' version '7.4.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Initialize publishing/signing extra properties with environmental vars
ext['signing.keyId'] = System.getenv('SIGNING_KEY_ID') ?: ''
ext['signing.password'] = System.getenv('SIGNING_PASSWORD') ?: ''
ext['signing.secretKeyRingFile'] = System.getenv('SIGNING_SECRET_KEY_RING_FILE') ?: ''
ext['ossrhUsername'] = System.getenv('OSSRH_USERNAME') ?: ''
ext['ossrhPassword'] = System.getenv('OSSRH_PASSWORD') ?: ''
// Override with local.properties if available
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

def pgpKeyContent = System.getenv('PGP_KEY_CONTENTS')
if (pgpKeyContent != null) {
    def tmpDir = new File("$rootProject.rootDir/tmp")
    mkdir tmpDir
    def keyFile = new File("$tmpDir/key.pgp")
    keyFile.createNewFile()
    def os = keyFile.newDataOutputStream()
    os.write(pgpKeyContent.decodeBase64())
    os.close()
    pgpKeyContent = ''

    ext['signing.secretKeyRingFile'] = keyFile.absolutePath
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = "21d06a31472b96"
            nexusUrl.set(uri("https://oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://oss.sonatype.org/content/repositories/snapshots/"))
            username = ossrhUsername
            password = ossrhPassword
            version = ''
        }
    }
}